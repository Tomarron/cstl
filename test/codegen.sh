#!/bin/sh
usage()
{
	echo -e "Usage: codegen.sh {vector | deque | list | string} name type [path] [heap]"
	echo -e "  or:  codegen.sh {set | multiset} name type comp [path] [heap]"
	echo -e "  or:  codegen.sh {map | multimap} name keytype valuetype comp [path] [heap]"
}

container=$1
case $container in
"vector")
	lower="vector"
	upper="VECTOR"
	name=$2
	type=$3
	path=$4
	heap=$5
	;;
"deque")
	lower="deque"
	upper="DEQUE"
	name=$2
	type=$3
	path=$4
	heap=$5
	;;
"ring")
	lower="ring"
	upper="RING"
	name=$2
	type=$3
	path=$4
	heap=$5
	;;
"list")
	lower="list"
	upper="LIST"
	name=$2
	type=$3
	path=$4
	heap=$5
	;;
"string")
	lower="string"
	upper="STRING"
	name=$2
	type=$3
	path=$4
	heap=$5
	;;
"set")
	lower="set"
	upper="SET"
	name=$2
	type=$3
	comp=$4
	path=$5
	heap=$6
	;;
"multiset")
	lower="set"
	upper="MULTISET"
	name=$2
	type=$3
	comp=$4
	path=$5
	heap=$6
	;;
"map")
	lower="map"
	upper="MAP"
	name=$2
	type=$3
	value=$4
	comp=$5
	path=$6
	heap=$7
	;;
"multimap")
	lower="map"
	upper="MULTIMAP"
	name=$2
	type=$3
	value=$4
	comp=$5
	path=$6
	heap=$7
	;;
*)
	usage
	exit
	;;
esac
if [ "$type" = "" ]; then
	usage
	exit
fi
if [ "$path" = "" ]; then
	path=$name
else
	path=`echo "$path" | sed -e "s:[^/]$:&/:"`$name
fi


hdr="\
#include \"../cstl/${lower}.h\"
#undef CSTL_VECTOR_MAGIC
#define CSTL_VECTOR_MAGIC(x) CSTL_VECTOR_MAGIC(x)
#undef CSTL_RING_MAGIC
#define CSTL_RING_MAGIC(x) CSTL_RING_MAGIC(x)
#undef CSTL_DEQUE_MAGIC
#define CSTL_DEQUE_MAGIC(x) CSTL_DEQUE_MAGIC(x)
#undef CSTL_LIST_MAGIC
#define CSTL_LIST_MAGIC(x) CSTL_LIST_MAGIC(x)
#undef CSTL_STRING_MAGIC
#define CSTL_STRING_MAGIC(x) CSTL_STRING_MAGIC(x)
"
if [ $container = "map" -o $container = "multimap" ]; then
	hdr=${hdr}"CSTL_${upper}_INTERFACE($name, $type, $value)"
else
	hdr=${hdr}"CSTL_${upper}_INTERFACE($name, $type)"
fi

src="\
#include \"../cstl/${lower}.h\"
#include \"../cstl/algorithm.h\"
#undef assert
#define assert(x) assert(x)
#undef CSTL_VECTOR_MAGIC
#define CSTL_VECTOR_MAGIC(x) CSTL_VECTOR_MAGIC(x)
#undef CSTL_RING_MAGIC
#define CSTL_RING_MAGIC(x) CSTL_RING_MAGIC(x)
#undef CSTL_DEQUE_MAGIC
#define CSTL_DEQUE_MAGIC(x) CSTL_DEQUE_MAGIC(x)
#undef CSTL_LIST_MAGIC
#define CSTL_LIST_MAGIC(x) CSTL_LIST_MAGIC(x)
#undef CSTL_STRING_MAGIC
#define CSTL_STRING_MAGIC(x) CSTL_STRING_MAGIC(x)
#undef CSTL_RBTREE_MAGIC
#define CSTL_RBTREE_MAGIC(x) CSTL_RBTREE_MAGIC(x)
"
if [ $container = "set" -o $container = "multiset" ]; then
	src=${src}"CSTL_${upper}_IMPLEMENT($name, $type, $comp)"
elif [ $container = "map" -o $container = "multimap" ]; then
	src=${src}"CSTL_${upper}_IMPLEMENT($name, $type, $value, $comp)"
else
	src=${src}"CSTL_${upper}_IMPLEMENT($name, $type)"
fi

rev=`grep '$Id' "../cstl/${lower}.h"`
vectorrev=`grep '$Id' "../cstl/vector.h"`
ringrev=`grep '$Id' "../cstl/ring.h"`
algorev=`grep '$Id' "../cstl/algorithm.h"`
rbtreerev=`grep '$Id' "../cstl/rbtree.h"`

# ヘッダファイル生成
included=`echo "$name""_H_INCLUDED" | tr "[:lower:]" "[:upper:]"`
echo -e "/* ${name}.h" > "$path"".h"
echo -e " * " >> "$path"".h"
echo -e " * generated by codegen.sh" >> "$path"".h"
echo -e "${rev}" >> "$path"".h"
if [ $lower = "vector" ]; then
	echo -e "${algorev}" >> "$path"".h"
elif [ $lower = "ring" ]; then
	echo -e "${algorev}" >> "$path"".h"
elif [ $lower = "deque" ]; then
	echo -e "${vectorrev}" >> "$path"".h"
	echo -e "${ringrev}" >> "$path"".h"
	echo -e "${algorev}" >> "$path"".h"
elif [ $lower = "string" ]; then
	echo -e "${vectorrev}" >> "$path"".h"
	echo -e "${algorev}" >> "$path"".h"
elif [ $lower = "set" -o $lower = "multiset" -o\
	   $lower = "map" -o $lower = "multimap" ]; then
	echo -e "${rbtreerev}" >> "$path"".h"
fi
echo -e " */" >> "$path"".h"
echo -e "#ifndef $included\n#define $included\n" >> "$path"".h"
echo -e "#include <stddef.h>\n" >> "$path"".h"
if [ $lower = "ring" ]; then
echo -e "\
#ifndef NDEBUG
#define CSTL_${upper}_MAGIC(x) x
#else
#define CSTL_${upper}_MAGIC(x)
#endif\n" >> "$path"".h"
fi
echo "$hdr" | cpp -I.. | grep "$name" | indent -kr -ut -ts4 \
| sed -e "s/$name \* /$name */g" >> "$path"".h"
echo -e "\n#endif /* $included */" >> "$path"".h"

# ソースファイル生成
echo -e "/* ${name}.c" > "$path"".c"
echo -e " * " >> "$path"".c"
echo -e " * generated by codegen.sh" >> "$path"".c"
echo -e "${rev}" >> "$path"".c"
if [ $lower = "vector" ]; then
	echo -e "${algorev}" >> "$path"".c"
elif [ $lower = "ring" ]; then
	echo -e "${algorev}" >> "$path"".c"
elif [ $lower = "deque" ]; then
	echo -e "${vectorrev}" >> "$path"".c"
	echo -e "${ringrev}" >> "$path"".c"
	echo -e "${algorev}" >> "$path"".c"
elif [ $lower = "string" ]; then
	echo -e "${vectorrev}" >> "$path"".c"
	echo -e "${algorev}" >> "$path"".c"
elif [ $lower = "set" -o $lower = "multiset" -o\
	   $lower = "map" -o $lower = "multimap" ]; then
	echo -e "${rbtreerev}" >> "$path"".c"
fi
echo -e " */" >> "$path"".c"
echo -e "#include <stdlib.h>" >> "$path"".c"
if [ "$comp" = "strcmp" ]; then
	echo -e "#include <string.h>" >> "$path"".c"
fi
echo -e "#include <assert.h>" >> "$path"".c"
echo -e "#include \"$name.h\"\n" >> "$path"".c"
if [ $lower != "ring" ]; then
if [ $lower = "deque" ]; then
echo -e "\
#ifndef NDEBUG
#define CSTL_${upper}_MAGIC(x) x
#define CSTL_VECTOR_MAGIC(x) x
#define CSTL_RING_MAGIC(x) x
#else
#define CSTL_${upper}_MAGIC(x)
#define CSTL_VECTOR_MAGIC(x)
#define CSTL_RING_MAGIC(x)
#endif\n" >> "$path"".c"
elif [ $lower = "string" ]; then
echo -e "\
#ifndef NDEBUG
#define CSTL_${upper}_MAGIC(x) x
#define CSTL_VECTOR_MAGIC(x) x
#else
#define CSTL_${upper}_MAGIC(x)
#define CSTL_VECTOR_MAGIC(x)
#endif\n" >> "$path"".c"
elif [ $lower = "set" -o $lower = "multiset" -o\
	   $lower = "map" -o $lower = "multimap" ]; then
echo -e "\
#ifndef NDEBUG
#define CSTL_RBTREE_MAGIC(x) x
#else
#define CSTL_RBTREE_MAGIC(x)
#endif\n" >> "$path"".c"
else
echo -e "\
#ifndef NDEBUG
#define CSTL_${upper}_MAGIC(x) x
#else
#define CSTL_${upper}_MAGIC(x)
#endif\n" >> "$path"".c"
fi
fi
if [ "$heap" != "" ]; then
echo -e "\
#include \"heap.h\"
extern Heap $heap;
#define malloc(s)      Heap_alloc(&$heap, s)
#define realloc(p, s)  Heap_realloc(&$heap, p, s)
#define free(p)        Heap_free(&$heap, p)
" >> "$path"".c"
fi
if [ $lower = "set" -o $lower = "multiset" -o\
	 $lower = "map" -o $lower = "multimap" ]; then
echo -e "\
enum {
	CSTL_RBTREE_RED,
	CSTL_RBTREE_BLACK,
	CSTL_RBTREE_HEAD
};\n" >> "$path"".c"
fi
echo "$src" | cpp -I.. | grep "$name" | indent -kr -ut -ts4 \
| sed -e "s/$name \* /$name */g" | sed -e "s/^} /}\n\n/" >> "$path"".c"

# コンパイル確認
gcc -Wall "$path"".c" -c
rm "$path"".o"
